@import "./radix-colors";

@mixin color($key) {
  @if map-has-key($colors, $key) {
    color: map-get($colors, $key);
  } @else {
    @error "Color key `#{$key}` not found in the `$colors` map. Available keys are: #{map-keys($colors)}.";
  }
}

@mixin background-color($key) {
  @if map-has-key($colors, $key) {
    background-color: map-get($colors, $key);
  } @else {
    @error "Background color key `#{$key}` not found in the `$colors` map. Available keys are: #{map-keys($colors)}.";
  }
}

@mixin fill($key) {
  @if map-has-key($colors, $key) {
    fill: map-get($colors, $key);
  } @else {
    @error "Fill color key `#{$key}` not found in the `$colors` map. Available keys are: #{map-keys($colors)}.";
  }
}

@mixin border(
  $key: null,
  $width: "inherit",
  $style: "inherit",
  $radius: "inherit"
) {
  $color: null;

  @if $key != null and map-has-key($colors, $key) {
    $color: map-get($colors, $key);
  } @else if $key != null and not map-has-key($colors, $key) {
    @error "Border color key `#{$key}` not found in the `$colors` map. Available keys are: #{map-keys($colors)}.";
  }

  border: $width $style if($color != null, $color, $key);

  @if $radius != 0 {
    border-radius: $radius;
  }
}

@mixin spring($type: "smooth", $duration: 500ms, $property: "all") {
  @if $type == "snappy" {
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  } @else if $type == "smooth" {
    transition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  } @else if $type == "bouncy" {
    transition-timing-function: cubic-bezier(0.34, 1.56, 0.64, 1);
  } @else {
    transition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
  transition-duration: $duration;
  transition-property: $property;
}
